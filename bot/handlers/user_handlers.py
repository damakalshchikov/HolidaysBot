import logging
from logging import Logger
from datetime import datetime

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart

import filters
import services


user_router: Router = Router()
logger: Logger = logging.getLogger(__name__)


@user_router.message(CommandStart())
async def star_event(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Çüëã –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø–æ –¥–∞—Ç–µ\n"
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
    )


@user_router.message(filters.IsDateFilter())
async def get_holiday_date(message: Message): # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∞—Ç—á–µ–π
    selected_date: datetime = datetime.strptime(message.text, "%d.%m.%Y")
    year: int = selected_date.year
    month: int = selected_date.month
    day: int = selected_date.day

    params: dict[str: int] = {
        "year": year,
        "country": "ru"
    }
    response: dict = services.fetch_holidays(params)

    holidays: dict[str: str] = response.get("response", {}).get("holidays", [])

    holidays_in_selected_date: list[str] = [
        f"""üéâ{holiday["name"]} - {holiday["date"]["datetime"]["day"]}.{holiday["date"]["datetime"]["month"]}.{holiday["date"]["datetime"]["year"]}üéâ"""
        for holiday in holidays
        if holiday["date"]["datetime"]["day"] == day and holiday["date"]["datetime"]["month"] == month
    ]

    if holidays_in_selected_date:
        await message.answer(f"–í —ç—Ç—É –¥–∞—Ç—É {message.text} –Ω–∞–π–¥–µ–Ω–æ {len(holidays_in_selected_date)} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤")
        await message.answer(*holidays_in_selected_date)
    else:
        await message.answer(f"–í —ç—Ç—É –¥–∞—Ç—É {message.text} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


@user_router.message()
async def error_event(message: Message):
    await message.answer("–£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞üò≠")
